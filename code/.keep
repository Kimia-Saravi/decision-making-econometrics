# Load required package
library(dplyr)

# Step 1: Load the data
data <- read.csv("C:/ado/usa_00003.csv")

# Apply initial filters
data_filtered <- data %>%
  filter(
    EDUC %in% c(0, 6, 7, 11),          # Only keep specified education levels
    EMPSTAT %in% c(1, 2, 3),           # Employed, Unemployed, Not in labor force
    CLASSWKR %in% c(1, 2),             # Self-employed or works for wages
    SEX %in% c(1, 2),                  # Only Male or Female
    AGE >= 18,                         # Adults only
    INCTOT >= 0 & INCTOT <= 300000,   # Reasonable personal income
    FTOTINC != 9999999,               # Drop missing family income
    INCWAGE != 999999,                # Drop missing wage income
    HCOVANY %in% c(1, 2),             # Valid insurance coverage status
    HCOVPRIV %in% c(1, 2),
    HCOVPUB %in% c(1, 2)
  )

data_filtered <- data_filtered %>%
  mutate(
    HCOVANY = ifelse(HCOVANY == 2, 1, 0),
    HCOVPRIV = ifelse(HCOVPRIV == 2, 1, 0),
    HCOVPUB = ifelse(HCOVPUB == 2, 1, 0)
  )


install.packages("broom")
install.packages("dplyr")

library(dplyr)
library(broom)

model_list <- list(
  list(dep = "HCOVANY", indep = "EDUC"),
  list(dep = "HCOVANY", indep = "INCTOT"),
  list(dep = "HCOVANY", indep = "CLASSWKR"),
  list(dep = "HCOVPRIV", indep = "EDUC"),
  list(dep = "HCOVPRIV", indep = "INCTOT"),
  list(dep = "HCOVPRIV", indep = "CLASSWKR"),
  list(dep = "HCOVPUB", indep = "EDUC"),
  list(dep = "HCOVPUB", indep = "INCTOT"),
  list(dep = "HCOVPUB", indep = "CLASSWKR")
)

for (i in seq_along(model_list)) {
  dep_var <- model_list[[i]]$dep
  indep_var <- model_list[[i]]$indep
  formula <- as.formula(paste(dep_var, "~", indep_var, "+ AGE + SEX"))
  
  model <- glm(formula, data = data_filtered, family = binomial(link = "logit"))
  
  result <- tidy(model) %>%
    mutate(odds_ratio = exp(estimate)) %>%
    select(term, estimate, odds_ratio, p.value)
  
  cat("\n==============================\n")
  cat("Model", i, ": ", dep_var, " ~ ", indep_var, "+ AGE + SEX\n")
  print(result)
}


library(broom)

model <- glm(HCOVANY ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))

tidy(model, conf.int = TRUE)

tidy(model, conf.int = TRUE, exponentiate = TRUE)



library(broom)

# Model 1
model1 <- glm(HCOVANY ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model1, conf.int = TRUE)
tidy(model1, conf.int = TRUE, exponentiate = TRUE)

# Model 2
model2 <- glm(HCOVANY ~ INCTOT + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model2, conf.int = TRUE)
tidy(model2, conf.int = TRUE, exponentiate = TRUE)

# Model 3
model3 <- glm(HCOVANY ~ CLASSWKR + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model3, conf.int = TRUE)
tidy(model3, conf.int = TRUE, exponentiate = TRUE)

# Model 4
model4 <- glm(HCOVPRIV ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model4, conf.int = TRUE)
tidy(model4, conf.int = TRUE, exponentiate = TRUE)

# Model 5
model5 <- glm(HCOVPRIV ~ INCTOT + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model5, conf.int = TRUE)
tidy(model5, conf.int = TRUE, exponentiate = TRUE)

# Model 6
model6 <- glm(HCOVPRIV ~ CLASSWKR + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model6, conf.int = TRUE)
tidy(model6, conf.int = TRUE, exponentiate = TRUE)

# Model 7
model7 <- glm(HCOVPUB ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model7, conf.int = TRUE)
tidy(model7, conf.int = TRUE, exponentiate = TRUE)

# Model 8
model8 <- glm(HCOVPUB ~ INCTOT + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model8, conf.int = TRUE)
tidy(model8, conf.int = TRUE, exponentiate = TRUE)

# Model 9
model9 <- glm(HCOVPUB ~ CLASSWKR + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model9, conf.int = TRUE)
tidy(model9, conf.int = TRUE, exponentiate = TRUE)








library(broom)
library(dplyr)

# Fit the three models
model1 <- glm(HCOVANY ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
model2 <- glm(HCOVANY ~ INCTOT + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
model3 <- glm(HCOVANY ~ CLASSWKR + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))

# Extract tidy results
model1_tidy <- tidy(model1, conf.int = TRUE, exponentiate = TRUE)
model2_tidy <- tidy(model2, conf.int = TRUE, exponentiate = TRUE)
model3_tidy <- tidy(model3, conf.int = TRUE, exponentiate = TRUE)

# Add model indicator
model1_tidy <- model1_tidy %>% mutate(model = "EDUC")
model2_tidy <- model2_tidy %>% mutate(model = "INCTOT")
model3_tidy <- model3_tidy %>% mutate(model = "CLASSWKR")

# Combine all together
combined_table <- bind_rows(model1_tidy, model2_tidy, model3_tidy) %>%
  select(model, term, estimate, std.error, p.value, conf.low, conf.high)

# View result
combined_table




# Step 1: Filter the dataset
data_filtered <- data %>%
  filter(
    EDUC %in% c(0, 6, 7, 11),          # Only keep specific education levels
    EMPSTAT %in% c(1, 2, 3),           # Employed, Unemployed, Not in labor force
    CLASSWKR %in% c(1, 2),             # Self-employed or working for wages
    SEX %in% c(1, 2),                  # Only Male or Female
    AGE >= 18,                         # Adults only
    INCTOT >= 0 & INCTOT <= 300000,     # Reasonable personal income
    FTOTINC != 9999999,                # Drop missing family income
    INCWAGE != 999999,                 # Drop missing wage income
    HCOVANY %in% c(1, 2),               # Valid insurance coverage
    HCOVPRIV %in% c(1, 2),
    HCOVPUB %in% c(1, 2)
  )


data_filtered <- data_filtered %>%
  mutate(
    HCOVANY = ifelse(HCOVANY == 2, 1, 0),
    HCOVPRIV = ifelse(HCOVPRIV == 2, 1, 0),
    HCOVPUB = ifelse(HCOVPUB == 2, 1, 0)
  )


# Step 2: Prepare your logistic models after filtering

library(broom)

# Model 1
model1 <- glm(HCOVANY ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model1, conf.int = TRUE)
tidy(model1, conf.int = TRUE, exponentiate = TRUE)

# Model 2
model2 <- glm(HCOVANY ~ INCTOT + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model2, conf.int = TRUE)
tidy(model2, conf.int = TRUE, exponentiate = TRUE)

# Model 3
model3 <- glm(HCOVANY ~ CLASSWKR + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model3, conf.int = TRUE)
tidy(model3, conf.int = TRUE, exponentiate = TRUE)

# Model 4
model4 <- glm(HCOVPRIV ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model4, conf.int = TRUE)
tidy(model4, conf.int = TRUE, exponentiate = TRUE)

# Model 5
model5 <- glm(HCOVPRIV ~ INCTOT + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model5, conf.int = TRUE)
tidy(model5, conf.int = TRUE, exponentiate = TRUE)

# Model 6
model6 <- glm(HCOVPRIV ~ CLASSWKR + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model6, conf.int = TRUE)
tidy(model6, conf.int = TRUE, exponentiate = TRUE)

# Model 7
model7 <- glm(HCOVPUB ~ EDUC + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model7, conf.int = TRUE)
tidy(model7, conf.int = TRUE, exponentiate = TRUE)

# Model 8
model8 <- glm(HCOVPUB ~ INCTOT + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model8, conf.int = TRUE)
tidy(model8, conf.int = TRUE, exponentiate = TRUE)

# Model 9
model9 <- glm(HCOVPUB ~ CLASSWKR + AGE + SEX, data = data_filtered, family = binomial(link = "logit"))
tidy(model9, conf.int = TRUE)
tidy(model9, conf.int = TRUE, exponentiate = TRUE)



# Load required libraries
library(dplyr)
library(broom)

# Step 1: Filter the dataset carefully
data_filtered <- data %>%
  filter(
    EDUC %in% c(0, 6, 7, 11),
    EMPSTAT %in% c(1, 2, 3),
    CLASSWKR %in% c(1, 2),
    SEX %in% c(1, 2),
    AGE >= 18,
    INCTOT >= 0 & INCTOT <= 300000,
    FTOTINC != 9999999,
    INCWAGE != 999999,
    HCOVANY %in% c(1, 2),
    HCOVPRIV %in% c(1, 2),
    HCOVPUB %in% c(1, 2)
  )

# Step 2: Recode dependent variables to 0/1
data_filtered <- data_filtered %>%
  mutate(
    HCOVANY = ifelse(HCOVANY == 2, 1, 0),
    HCOVPRIV = ifelse(HCOVPRIV == 2, 1, 0),
    HCOVPUB = ifelse(HCOVPUB == 2, 1, 0)
  )

# Step 3: Create log-transformed income variables
data_filtered <- data_filtered %>%
  mutate(
    log_INCTOT = log(INCTOT + 1),
    log_FTOTINC = log(FTOTINC + 1),
    log_INCWAGE = log(INCWAGE + 1)
  )

# Step 4: List of dependent variables
dependent_vars <- c("HCOVANY", "HCOVPUB", "HCOVPRIV")

# Step 5: Run logistic regression models
for (i in seq_along(dependent_vars)) {
  dep_var <- dependent_vars[i]
  
  # Build the model formula using log-transformed income variables
  formula <- as.formula(paste0(dep_var, " ~ EDUC + EMPSTAT + CLASSWKR + SEX + AGE + log_INCTOT + log_FTOTINC + log_INCWAGE"))
  
  # Fit logistic regression
  model <- glm(formula, data = data_filtered, family = binomial(link = "logit"))
  
  # Extract tidy results with odds ratios and 95% confidence intervals
  result <- tidy(model, conf.int = TRUE, exponentiate = TRUE) %>%
    select(term, estimate, conf.low, conf.high, p.value)
  
  # Print results
  cat("\n=============================\n")
  cat("Model", i, ": Dependent variable =", dep_var, "\n")
  print(result)
}

# Load necessary libraries
library(dplyr)
library(broom)

# Step 1: Filter the dataset carefully
data_filtered <- data %>%
  filter(
    EDUC %in% c(0, 6, 7, 11),
    EMPSTAT %in% c(1, 2, 3),
    CLASSWKR %in% c(1, 2),
    SEX %in% c(1, 2),
    AGE >= 18,
    INCTOT >= 0 & INCTOT <= 300000,
    FTOTINC != 9999999,
    INCWAGE != 999999,
    HCOVANY %in% c(1, 2),
    HCOVPRIV %in% c(1, 2),
    HCOVPUB %in% c(1, 2)
  )

# Step 2: Recode dependent variables to 0/1
data_filtered <- data_filtered %>%
  mutate(
    HCOVANY = ifelse(HCOVANY == 2, 1, 0),
    HCOVPRIV = ifelse(HCOVPRIV == 2, 1, 0),
    HCOVPUB = ifelse(HCOVPUB == 2, 1, 0)
  )

# Step 3: Create log-transformed income variables
data_filtered <- data_filtered %>%
  mutate(
    log_INCTOT = log(INCTOT + 1),
    log_FTOTINC = log(FTOTINC + 1),
    log_INCWAGE = log(INCWAGE + 1)
  )

# Step 4: List of dependent variables
dependent_vars <- c("HCOVANY", "HCOVPUB", "HCOVPRIV")

# Step 5: Run logistic models and extract Coefficients (NOT odds ratio)
for (i in seq_along(dependent_vars)) {
  dep_var <- dependent_vars[i]
  
  # Build the formula
  formula <- as.formula(paste0(dep_var, " ~ EDUC + EMPSTAT + CLASSWKR + SEX + AGE + log_INCTOT + log_FTOTINC + log_INCWAGE"))
  
  # Fit logistic regression model
  model <- glm(formula, data = data_filtered, family = binomial(link = "logit"))
  
  # Extract tidy results WITHOUT exponentiating
  result <- tidy(model, conf.int = TRUE, exponentiate = FALSE) %>%
    select(term, estimate, conf.low, conf.high, p.value)
  
  # Print results
  cat("\n=============================\n")
  cat("Model", i, ": Dependent variable =", dep_var, "\n")
  print(result)
}

# Load required library
library(dplyr)

# Choose variables you want summary for
summary_vars <- data_filtered %>%
  select(EDUC, EMPSTAT, CLASSWKR, SEX, AGE, log_INCTOT, log_FTOTINC, log_INCWAGE, HCOVANY, HCOVPUB, HCOVPRIV)

# Create the summary table
summary_table <- summary_vars %>%
  summarise(across(everything(), list(
    Min = ~min(., na.rm = TRUE),
    Median = ~median(., na.rm = TRUE),
    Mean = ~mean(., na.rm = TRUE),
    SD = ~sd(., na.rm = TRUE),
    Max = ~max(., na.rm = TRUE),
    N = ~sum(!is.na(.))
  ), .names = "{.col}_{.fn}"))

# Reshape the table to match the desired format
summary_long <- tibble(
  Variable = names(summary_vars),
  Min = unlist(summary_table[ , grep("_Min", names(summary_table))]),
  Median = unlist(summary_table[ , grep("_Median", names(summary_table))]),
  Mean = unlist(summary_table[ , grep("_Mean", names(summary_table))]),
  SD = unlist(summary_table[ , grep("_SD", names(summary_table))]),
  Max = unlist(summary_table[ , grep("_Max", names(summary_table))]),
  N = unlist(summary_table[ , grep("_N", names(summary_table))])
)

# View summary table
print(summary_long)




# Step 2: Filter base data
data_filtered <- data %>%
  filter(
    EDUC %in% c(0, 6, 7, 11),
    EMPSTAT %in% c(1, 2, 3),
    SEX %in% c(1, 2),
    AGE >= 18,
    INCTOT >= 0 & INCTOT <= 300000,
    FTOTINC != 9999999,
    INCWAGE != 999999,
    HCOVANY %in% c(1, 2),
    HCOVPRIV %in% c(1, 2),
    HCOVPUB %in% c(1, 2)
  ) %>%
  mutate(
    log_INCTOT = log(INCTOT + 1),
    log_FTOTINC = log(FTOTINC + 1),
    log_INCWAGE = log(INCWAGE + 1),
    HCOVANY = ifelse(HCOVANY == 2, 1, 0),
    HCOVPRIV = ifelse(HCOVPRIV == 2, 1, 0),
    HCOVPUB = ifelse(HCOVPUB == 2, 1, 0)
  )

# Step 3: Prepare CLASSWKRD
data_filtered <- data_filtered %>%
  filter(CLASSWKRD %in% c(10, 11, 12, 13, 14, 20, 22, 23, 24, 25, 27, 28, 29)) %>%
  mutate(
    CLASSWKRD = factor(CLASSWKRD,
                       levels = c(10, 11, 12, 13, 14, 20, 22, 23, 24, 25, 27, 28, 29),
                       labels = c(
                         "Self-employed",
                         "Employer",
                         "Working on own account",
                         "Self-employed, not incorporated",
                         "Self-employed, incorporated",
                         "Works for wages",
                         "Private wage/salary",
                         "Non-profit wage/salary",
                         "Government wage/salary",
                         "Federal govt employee",
                         "State govt employee",
                         "Local govt employee",
                         "Unpaid family worker"
                       )
    )
  )

# Step 4: Set reference group
data_filtered$CLASSWKRD <- relevel(data_filtered$CLASSWKRD, ref = "Works for wages")

# Step 5: Run logistic regressions
dependent_vars <- c("HCOVANY", "HCOVPUB", "HCOVPRIV")

for (dep_var in dependent_vars) {
  
  formula <- as.formula(paste0(dep_var, " ~ CLASSWKRD + SEX + AGE + log_INCTOT + log_FTOTINC + log_INCWAGE"))
  
  model <- glm(formula, data = data_filtered, family = binomial(link = "logit"))
  
  results <- tidy(model, conf.int = TRUE, exponentiate = FALSE) %>%
    mutate(
      z_value = estimate / std.error,
      p.value = ifelse(p.value < 2e-16, "<0.001", format.pval(p.value, digits = 3, eps = 0.001))
    ) %>%
    select(term, estimate, std.error, z_value, p.value, conf.low, conf.high)
  
  cat("\n=============================\n")
  cat("Model for Dependent Variable:", dep_var, "\n")
  print(results)
}
